// Generated by gencpp from file franka_planner_control/MoveItTime.msg
// DO NOT EDIT!


#ifndef FRANKA_PLANNER_CONTROL_MESSAGE_MOVEITTIME_H
#define FRANKA_PLANNER_CONTROL_MESSAGE_MOVEITTIME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace franka_planner_control
{
template <class ContainerAllocator>
struct MoveItTime_
{
  typedef MoveItTime_<ContainerAllocator> Type;

  MoveItTime_()
    : time(0.0)
    , planning_time(0.0)
    , execution_time(0.0)  {
    }
  MoveItTime_(const ContainerAllocator& _alloc)
    : time(0.0)
    , planning_time(0.0)
    , execution_time(0.0)  {
  (void)_alloc;
    }



   typedef double _time_type;
  _time_type time;

   typedef double _planning_time_type;
  _planning_time_type planning_time;

   typedef double _execution_time_type;
  _execution_time_type execution_time;





  typedef boost::shared_ptr< ::franka_planner_control::MoveItTime_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_planner_control::MoveItTime_<ContainerAllocator> const> ConstPtr;

}; // struct MoveItTime_

typedef ::franka_planner_control::MoveItTime_<std::allocator<void> > MoveItTime;

typedef boost::shared_ptr< ::franka_planner_control::MoveItTime > MoveItTimePtr;
typedef boost::shared_ptr< ::franka_planner_control::MoveItTime const> MoveItTimeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_planner_control::MoveItTime_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_planner_control::MoveItTime_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::franka_planner_control::MoveItTime_<ContainerAllocator1> & lhs, const ::franka_planner_control::MoveItTime_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.planning_time == rhs.planning_time &&
    lhs.execution_time == rhs.execution_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::franka_planner_control::MoveItTime_<ContainerAllocator1> & lhs, const ::franka_planner_control::MoveItTime_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace franka_planner_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::franka_planner_control::MoveItTime_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_planner_control::MoveItTime_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_planner_control::MoveItTime_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_planner_control::MoveItTime_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_planner_control::MoveItTime_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_planner_control::MoveItTime_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_planner_control::MoveItTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d94af49849121fe51add0cc4fc4d2503";
  }

  static const char* value(const ::franka_planner_control::MoveItTime_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd94af49849121fe5ULL;
  static const uint64_t static_value2 = 0x1add0cc4fc4d2503ULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_planner_control::MoveItTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_planner_control/MoveItTime";
  }

  static const char* value(const ::franka_planner_control::MoveItTime_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_planner_control::MoveItTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 time\n"
"float64 planning_time\n"
"float64 execution_time\n"
;
  }

  static const char* value(const ::franka_planner_control::MoveItTime_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_planner_control::MoveItTime_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.planning_time);
      stream.next(m.execution_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveItTime_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_planner_control::MoveItTime_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_planner_control::MoveItTime_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "planning_time: ";
    Printer<double>::stream(s, indent + "  ", v.planning_time);
    s << indent << "execution_time: ";
    Printer<double>::stream(s, indent + "  ", v.execution_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_PLANNER_CONTROL_MESSAGE_MOVEITTIME_H
