# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from franka_planner_control/TrajectoryPredictions.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrajectoryPredictions(genpy.Message):
  _md5sum = "899976afaf40b6f4e6d8c2730905b6af"
  _type = "franka_planner_control/TrajectoryPredictions"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 time
float64[700] q_pred
float64[700] dotq_pred
float64[700] ddotq_pred
float64[700] tau_pred"""
  __slots__ = ['time','q_pred','dotq_pred','ddotq_pred','tau_pred']
  _slot_types = ['float64','float64[700]','float64[700]','float64[700]','float64[700]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,q_pred,dotq_pred,ddotq_pred,tau_pred

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrajectoryPredictions, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = 0.
      if self.q_pred is None:
        self.q_pred = [0.] * 700
      if self.dotq_pred is None:
        self.dotq_pred = [0.] * 700
      if self.ddotq_pred is None:
        self.ddotq_pred = [0.] * 700
      if self.tau_pred is None:
        self.tau_pred = [0.] * 700
    else:
      self.time = 0.
      self.q_pred = [0.] * 700
      self.dotq_pred = [0.] * 700
      self.ddotq_pred = [0.] * 700
      self.tau_pred = [0.] * 700

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.time
      buff.write(_get_struct_d().pack(_x))
      buff.write(_get_struct_700d().pack(*self.q_pred))
      buff.write(_get_struct_700d().pack(*self.dotq_pred))
      buff.write(_get_struct_700d().pack(*self.ddotq_pred))
      buff.write(_get_struct_700d().pack(*self.tau_pred))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 8
      (self.time,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 5600
      self.q_pred = _get_struct_700d().unpack(str[start:end])
      start = end
      end += 5600
      self.dotq_pred = _get_struct_700d().unpack(str[start:end])
      start = end
      end += 5600
      self.ddotq_pred = _get_struct_700d().unpack(str[start:end])
      start = end
      end += 5600
      self.tau_pred = _get_struct_700d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.time
      buff.write(_get_struct_d().pack(_x))
      buff.write(self.q_pred.tostring())
      buff.write(self.dotq_pred.tostring())
      buff.write(self.ddotq_pred.tostring())
      buff.write(self.tau_pred.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 8
      (self.time,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 5600
      self.q_pred = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=700)
      start = end
      end += 5600
      self.dotq_pred = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=700)
      start = end
      end += 5600
      self.ddotq_pred = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=700)
      start = end
      end += 5600
      self.tau_pred = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=700)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_700d = None
def _get_struct_700d():
    global _struct_700d
    if _struct_700d is None:
        _struct_700d = struct.Struct("<700d")
    return _struct_700d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
