// Generated by gencpp from file franka_planner_control/TrajectoryPredictions.msg
// DO NOT EDIT!


#ifndef FRANKA_PLANNER_CONTROL_MESSAGE_TRAJECTORYPREDICTIONS_H
#define FRANKA_PLANNER_CONTROL_MESSAGE_TRAJECTORYPREDICTIONS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace franka_planner_control
{
template <class ContainerAllocator>
struct TrajectoryPredictions_
{
  typedef TrajectoryPredictions_<ContainerAllocator> Type;

  TrajectoryPredictions_()
    : time(0.0)
    , q_pred()
    , dotq_pred()
    , ddotq_pred()
    , tau_pred()  {
      q_pred.assign(0.0);

      dotq_pred.assign(0.0);

      ddotq_pred.assign(0.0);

      tau_pred.assign(0.0);
  }
  TrajectoryPredictions_(const ContainerAllocator& _alloc)
    : time(0.0)
    , q_pred()
    , dotq_pred()
    , ddotq_pred()
    , tau_pred()  {
  (void)_alloc;
      q_pred.assign(0.0);

      dotq_pred.assign(0.0);

      ddotq_pred.assign(0.0);

      tau_pred.assign(0.0);
  }



   typedef double _time_type;
  _time_type time;

   typedef boost::array<double, 700>  _q_pred_type;
  _q_pred_type q_pred;

   typedef boost::array<double, 700>  _dotq_pred_type;
  _dotq_pred_type dotq_pred;

   typedef boost::array<double, 700>  _ddotq_pred_type;
  _ddotq_pred_type ddotq_pred;

   typedef boost::array<double, 700>  _tau_pred_type;
  _tau_pred_type tau_pred;





  typedef boost::shared_ptr< ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryPredictions_

typedef ::franka_planner_control::TrajectoryPredictions_<std::allocator<void> > TrajectoryPredictions;

typedef boost::shared_ptr< ::franka_planner_control::TrajectoryPredictions > TrajectoryPredictionsPtr;
typedef boost::shared_ptr< ::franka_planner_control::TrajectoryPredictions const> TrajectoryPredictionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator1> & lhs, const ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.q_pred == rhs.q_pred &&
    lhs.dotq_pred == rhs.dotq_pred &&
    lhs.ddotq_pred == rhs.ddotq_pred &&
    lhs.tau_pred == rhs.tau_pred;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator1> & lhs, const ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace franka_planner_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "899976afaf40b6f4e6d8c2730905b6af";
  }

  static const char* value(const ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x899976afaf40b6f4ULL;
  static const uint64_t static_value2 = 0xe6d8c2730905b6afULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_planner_control/TrajectoryPredictions";
  }

  static const char* value(const ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 time\n"
"float64[700] q_pred\n"
"float64[700] dotq_pred\n"
"float64[700] ddotq_pred\n"
"float64[700] tau_pred\n"
;
  }

  static const char* value(const ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.q_pred);
      stream.next(m.dotq_pred);
      stream.next(m.ddotq_pred);
      stream.next(m.tau_pred);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryPredictions_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_planner_control::TrajectoryPredictions_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "q_pred[]" << std::endl;
    for (size_t i = 0; i < v.q_pred.size(); ++i)
    {
      s << indent << "  q_pred[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q_pred[i]);
    }
    s << indent << "dotq_pred[]" << std::endl;
    for (size_t i = 0; i < v.dotq_pred.size(); ++i)
    {
      s << indent << "  dotq_pred[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dotq_pred[i]);
    }
    s << indent << "ddotq_pred[]" << std::endl;
    for (size_t i = 0; i < v.ddotq_pred.size(); ++i)
    {
      s << indent << "  ddotq_pred[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ddotq_pred[i]);
    }
    s << indent << "tau_pred[]" << std::endl;
    for (size_t i = 0; i < v.tau_pred.size(); ++i)
    {
      s << indent << "  tau_pred[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tau_pred[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_PLANNER_CONTROL_MESSAGE_TRAJECTORYPREDICTIONS_H
