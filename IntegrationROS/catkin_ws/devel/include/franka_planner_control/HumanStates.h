// Generated by gencpp from file franka_planner_control/HumanStates.msg
// DO NOT EDIT!


#ifndef FRANKA_PLANNER_CONTROL_MESSAGE_HUMANSTATES_H
#define FRANKA_PLANNER_CONTROL_MESSAGE_HUMANSTATES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>

namespace franka_planner_control
{
template <class ContainerAllocator>
struct HumanStates_
{
  typedef HumanStates_<ContainerAllocator> Type;

  HumanStates_()
    : time(0.0)
    , lowerarm_startpoint()
    , lowerarm_endpoint()
    , lowerarm_center()
    , quat_lowerarm2robot()
    , upperarm_startpoint()
    , upperarm_endpoint()
    , upperarm_center()
    , quat_upperarm2robot()
    , head_center()
    , quat_head2robot()  {
    }
  HumanStates_(const ContainerAllocator& _alloc)
    : time(0.0)
    , lowerarm_startpoint(_alloc)
    , lowerarm_endpoint(_alloc)
    , lowerarm_center(_alloc)
    , quat_lowerarm2robot(_alloc)
    , upperarm_startpoint(_alloc)
    , upperarm_endpoint(_alloc)
    , upperarm_center(_alloc)
    , quat_upperarm2robot(_alloc)
    , head_center(_alloc)
    , quat_head2robot(_alloc)  {
  (void)_alloc;
    }



   typedef double _time_type;
  _time_type time;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _lowerarm_startpoint_type;
  _lowerarm_startpoint_type lowerarm_startpoint;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _lowerarm_endpoint_type;
  _lowerarm_endpoint_type lowerarm_endpoint;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _lowerarm_center_type;
  _lowerarm_center_type lowerarm_center;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _quat_lowerarm2robot_type;
  _quat_lowerarm2robot_type quat_lowerarm2robot;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _upperarm_startpoint_type;
  _upperarm_startpoint_type upperarm_startpoint;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _upperarm_endpoint_type;
  _upperarm_endpoint_type upperarm_endpoint;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _upperarm_center_type;
  _upperarm_center_type upperarm_center;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _quat_upperarm2robot_type;
  _quat_upperarm2robot_type quat_upperarm2robot;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _head_center_type;
  _head_center_type head_center;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _quat_head2robot_type;
  _quat_head2robot_type quat_head2robot;





  typedef boost::shared_ptr< ::franka_planner_control::HumanStates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_planner_control::HumanStates_<ContainerAllocator> const> ConstPtr;

}; // struct HumanStates_

typedef ::franka_planner_control::HumanStates_<std::allocator<void> > HumanStates;

typedef boost::shared_ptr< ::franka_planner_control::HumanStates > HumanStatesPtr;
typedef boost::shared_ptr< ::franka_planner_control::HumanStates const> HumanStatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_planner_control::HumanStates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_planner_control::HumanStates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::franka_planner_control::HumanStates_<ContainerAllocator1> & lhs, const ::franka_planner_control::HumanStates_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.lowerarm_startpoint == rhs.lowerarm_startpoint &&
    lhs.lowerarm_endpoint == rhs.lowerarm_endpoint &&
    lhs.lowerarm_center == rhs.lowerarm_center &&
    lhs.quat_lowerarm2robot == rhs.quat_lowerarm2robot &&
    lhs.upperarm_startpoint == rhs.upperarm_startpoint &&
    lhs.upperarm_endpoint == rhs.upperarm_endpoint &&
    lhs.upperarm_center == rhs.upperarm_center &&
    lhs.quat_upperarm2robot == rhs.quat_upperarm2robot &&
    lhs.head_center == rhs.head_center &&
    lhs.quat_head2robot == rhs.quat_head2robot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::franka_planner_control::HumanStates_<ContainerAllocator1> & lhs, const ::franka_planner_control::HumanStates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace franka_planner_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::franka_planner_control::HumanStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_planner_control::HumanStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_planner_control::HumanStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_planner_control::HumanStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_planner_control::HumanStates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_planner_control::HumanStates_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_planner_control::HumanStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad7042df2f9df072f398637da6be578c";
  }

  static const char* value(const ::franka_planner_control::HumanStates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad7042df2f9df072ULL;
  static const uint64_t static_value2 = 0xf398637da6be578cULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_planner_control::HumanStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_planner_control/HumanStates";
  }

  static const char* value(const ::franka_planner_control::HumanStates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_planner_control::HumanStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 time\n"
"geometry_msgs/Point lowerarm_startpoint\n"
"geometry_msgs/Point lowerarm_endpoint\n"
"geometry_msgs/Point lowerarm_center\n"
"geometry_msgs/Quaternion quat_lowerarm2robot\n"
"geometry_msgs/Point upperarm_startpoint\n"
"geometry_msgs/Point upperarm_endpoint\n"
"geometry_msgs/Point upperarm_center\n"
"geometry_msgs/Quaternion quat_upperarm2robot\n"
"geometry_msgs/Point head_center\n"
"geometry_msgs/Quaternion quat_head2robot\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::franka_planner_control::HumanStates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_planner_control::HumanStates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.lowerarm_startpoint);
      stream.next(m.lowerarm_endpoint);
      stream.next(m.lowerarm_center);
      stream.next(m.quat_lowerarm2robot);
      stream.next(m.upperarm_startpoint);
      stream.next(m.upperarm_endpoint);
      stream.next(m.upperarm_center);
      stream.next(m.quat_upperarm2robot);
      stream.next(m.head_center);
      stream.next(m.quat_head2robot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HumanStates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_planner_control::HumanStates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_planner_control::HumanStates_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "lowerarm_startpoint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.lowerarm_startpoint);
    s << indent << "lowerarm_endpoint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.lowerarm_endpoint);
    s << indent << "lowerarm_center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.lowerarm_center);
    s << indent << "quat_lowerarm2robot: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.quat_lowerarm2robot);
    s << indent << "upperarm_startpoint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.upperarm_startpoint);
    s << indent << "upperarm_endpoint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.upperarm_endpoint);
    s << indent << "upperarm_center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.upperarm_center);
    s << indent << "quat_upperarm2robot: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.quat_upperarm2robot);
    s << indent << "head_center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.head_center);
    s << indent << "quat_head2robot: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.quat_head2robot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_PLANNER_CONTROL_MESSAGE_HUMANSTATES_H
