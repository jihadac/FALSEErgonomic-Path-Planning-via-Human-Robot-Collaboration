// Generated by gencpp from file franka_planner_control/DistanceToConstraints.msg
// DO NOT EDIT!


#ifndef FRANKA_PLANNER_CONTROL_MESSAGE_DISTANCETOCONSTRAINTS_H
#define FRANKA_PLANNER_CONTROL_MESSAGE_DISTANCETOCONSTRAINTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace franka_planner_control
{
template <class ContainerAllocator>
struct DistanceToConstraints_
{
  typedef DistanceToConstraints_<ContainerAllocator> Type;

  DistanceToConstraints_()
    : time(0.0)
    , tau(0.0)
    , dotq(0.0)
    , q(0.0)
    , dotp_EE(0.0)
    , terminal_energy(0.0)
    , sphere(0.0)
    , cylinder(0.0)
    , wall(0.0)  {
    }
  DistanceToConstraints_(const ContainerAllocator& _alloc)
    : time(0.0)
    , tau(0.0)
    , dotq(0.0)
    , q(0.0)
    , dotp_EE(0.0)
    , terminal_energy(0.0)
    , sphere(0.0)
    , cylinder(0.0)
    , wall(0.0)  {
  (void)_alloc;
    }



   typedef double _time_type;
  _time_type time;

   typedef double _tau_type;
  _tau_type tau;

   typedef double _dotq_type;
  _dotq_type dotq;

   typedef double _q_type;
  _q_type q;

   typedef double _dotp_EE_type;
  _dotp_EE_type dotp_EE;

   typedef double _terminal_energy_type;
  _terminal_energy_type terminal_energy;

   typedef double _sphere_type;
  _sphere_type sphere;

   typedef double _cylinder_type;
  _cylinder_type cylinder;

   typedef double _wall_type;
  _wall_type wall;





  typedef boost::shared_ptr< ::franka_planner_control::DistanceToConstraints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::franka_planner_control::DistanceToConstraints_<ContainerAllocator> const> ConstPtr;

}; // struct DistanceToConstraints_

typedef ::franka_planner_control::DistanceToConstraints_<std::allocator<void> > DistanceToConstraints;

typedef boost::shared_ptr< ::franka_planner_control::DistanceToConstraints > DistanceToConstraintsPtr;
typedef boost::shared_ptr< ::franka_planner_control::DistanceToConstraints const> DistanceToConstraintsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::franka_planner_control::DistanceToConstraints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::franka_planner_control::DistanceToConstraints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::franka_planner_control::DistanceToConstraints_<ContainerAllocator1> & lhs, const ::franka_planner_control::DistanceToConstraints_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.tau == rhs.tau &&
    lhs.dotq == rhs.dotq &&
    lhs.q == rhs.q &&
    lhs.dotp_EE == rhs.dotp_EE &&
    lhs.terminal_energy == rhs.terminal_energy &&
    lhs.sphere == rhs.sphere &&
    lhs.cylinder == rhs.cylinder &&
    lhs.wall == rhs.wall;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::franka_planner_control::DistanceToConstraints_<ContainerAllocator1> & lhs, const ::franka_planner_control::DistanceToConstraints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace franka_planner_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::franka_planner_control::DistanceToConstraints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::franka_planner_control::DistanceToConstraints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_planner_control::DistanceToConstraints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::franka_planner_control::DistanceToConstraints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_planner_control::DistanceToConstraints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::franka_planner_control::DistanceToConstraints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::franka_planner_control::DistanceToConstraints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a849fb29c9c41af1ce04081a677e64dd";
  }

  static const char* value(const ::franka_planner_control::DistanceToConstraints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa849fb29c9c41af1ULL;
  static const uint64_t static_value2 = 0xce04081a677e64ddULL;
};

template<class ContainerAllocator>
struct DataType< ::franka_planner_control::DistanceToConstraints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "franka_planner_control/DistanceToConstraints";
  }

  static const char* value(const ::franka_planner_control::DistanceToConstraints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::franka_planner_control::DistanceToConstraints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 time\n"
"float64 tau\n"
"float64 dotq\n"
"float64 q\n"
"float64 dotp_EE\n"
"float64 terminal_energy\n"
"float64 sphere\n"
"float64 cylinder\n"
"float64 wall\n"
;
  }

  static const char* value(const ::franka_planner_control::DistanceToConstraints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::franka_planner_control::DistanceToConstraints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.tau);
      stream.next(m.dotq);
      stream.next(m.q);
      stream.next(m.dotp_EE);
      stream.next(m.terminal_energy);
      stream.next(m.sphere);
      stream.next(m.cylinder);
      stream.next(m.wall);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DistanceToConstraints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::franka_planner_control::DistanceToConstraints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::franka_planner_control::DistanceToConstraints_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "tau: ";
    Printer<double>::stream(s, indent + "  ", v.tau);
    s << indent << "dotq: ";
    Printer<double>::stream(s, indent + "  ", v.dotq);
    s << indent << "q: ";
    Printer<double>::stream(s, indent + "  ", v.q);
    s << indent << "dotp_EE: ";
    Printer<double>::stream(s, indent + "  ", v.dotp_EE);
    s << indent << "terminal_energy: ";
    Printer<double>::stream(s, indent + "  ", v.terminal_energy);
    s << indent << "sphere: ";
    Printer<double>::stream(s, indent + "  ", v.sphere);
    s << indent << "cylinder: ";
    Printer<double>::stream(s, indent + "  ", v.cylinder);
    s << indent << "wall: ";
    Printer<double>::stream(s, indent + "  ", v.wall);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANKA_PLANNER_CONTROL_MESSAGE_DISTANCETOCONSTRAINTS_H
