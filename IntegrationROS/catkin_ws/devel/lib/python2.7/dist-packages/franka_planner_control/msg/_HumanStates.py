# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from franka_planner_control/HumanStates.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class HumanStates(genpy.Message):
  _md5sum = "ad7042df2f9df072f398637da6be578c"
  _type = "franka_planner_control/HumanStates"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 time
geometry_msgs/Point lowerarm_startpoint
geometry_msgs/Point lowerarm_endpoint
geometry_msgs/Point lowerarm_center
geometry_msgs/Quaternion quat_lowerarm2robot
geometry_msgs/Point upperarm_startpoint
geometry_msgs/Point upperarm_endpoint
geometry_msgs/Point upperarm_center
geometry_msgs/Quaternion quat_upperarm2robot
geometry_msgs/Point head_center
geometry_msgs/Quaternion quat_head2robot
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['time','lowerarm_startpoint','lowerarm_endpoint','lowerarm_center','quat_lowerarm2robot','upperarm_startpoint','upperarm_endpoint','upperarm_center','quat_upperarm2robot','head_center','quat_head2robot']
  _slot_types = ['float64','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Quaternion','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Quaternion','geometry_msgs/Point','geometry_msgs/Quaternion']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time,lowerarm_startpoint,lowerarm_endpoint,lowerarm_center,quat_lowerarm2robot,upperarm_startpoint,upperarm_endpoint,upperarm_center,quat_upperarm2robot,head_center,quat_head2robot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HumanStates, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time is None:
        self.time = 0.
      if self.lowerarm_startpoint is None:
        self.lowerarm_startpoint = geometry_msgs.msg.Point()
      if self.lowerarm_endpoint is None:
        self.lowerarm_endpoint = geometry_msgs.msg.Point()
      if self.lowerarm_center is None:
        self.lowerarm_center = geometry_msgs.msg.Point()
      if self.quat_lowerarm2robot is None:
        self.quat_lowerarm2robot = geometry_msgs.msg.Quaternion()
      if self.upperarm_startpoint is None:
        self.upperarm_startpoint = geometry_msgs.msg.Point()
      if self.upperarm_endpoint is None:
        self.upperarm_endpoint = geometry_msgs.msg.Point()
      if self.upperarm_center is None:
        self.upperarm_center = geometry_msgs.msg.Point()
      if self.quat_upperarm2robot is None:
        self.quat_upperarm2robot = geometry_msgs.msg.Quaternion()
      if self.head_center is None:
        self.head_center = geometry_msgs.msg.Point()
      if self.quat_head2robot is None:
        self.quat_head2robot = geometry_msgs.msg.Quaternion()
    else:
      self.time = 0.
      self.lowerarm_startpoint = geometry_msgs.msg.Point()
      self.lowerarm_endpoint = geometry_msgs.msg.Point()
      self.lowerarm_center = geometry_msgs.msg.Point()
      self.quat_lowerarm2robot = geometry_msgs.msg.Quaternion()
      self.upperarm_startpoint = geometry_msgs.msg.Point()
      self.upperarm_endpoint = geometry_msgs.msg.Point()
      self.upperarm_center = geometry_msgs.msg.Point()
      self.quat_upperarm2robot = geometry_msgs.msg.Quaternion()
      self.head_center = geometry_msgs.msg.Point()
      self.quat_head2robot = geometry_msgs.msg.Quaternion()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_34d().pack(_x.time, _x.lowerarm_startpoint.x, _x.lowerarm_startpoint.y, _x.lowerarm_startpoint.z, _x.lowerarm_endpoint.x, _x.lowerarm_endpoint.y, _x.lowerarm_endpoint.z, _x.lowerarm_center.x, _x.lowerarm_center.y, _x.lowerarm_center.z, _x.quat_lowerarm2robot.x, _x.quat_lowerarm2robot.y, _x.quat_lowerarm2robot.z, _x.quat_lowerarm2robot.w, _x.upperarm_startpoint.x, _x.upperarm_startpoint.y, _x.upperarm_startpoint.z, _x.upperarm_endpoint.x, _x.upperarm_endpoint.y, _x.upperarm_endpoint.z, _x.upperarm_center.x, _x.upperarm_center.y, _x.upperarm_center.z, _x.quat_upperarm2robot.x, _x.quat_upperarm2robot.y, _x.quat_upperarm2robot.z, _x.quat_upperarm2robot.w, _x.head_center.x, _x.head_center.y, _x.head_center.z, _x.quat_head2robot.x, _x.quat_head2robot.y, _x.quat_head2robot.z, _x.quat_head2robot.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lowerarm_startpoint is None:
        self.lowerarm_startpoint = geometry_msgs.msg.Point()
      if self.lowerarm_endpoint is None:
        self.lowerarm_endpoint = geometry_msgs.msg.Point()
      if self.lowerarm_center is None:
        self.lowerarm_center = geometry_msgs.msg.Point()
      if self.quat_lowerarm2robot is None:
        self.quat_lowerarm2robot = geometry_msgs.msg.Quaternion()
      if self.upperarm_startpoint is None:
        self.upperarm_startpoint = geometry_msgs.msg.Point()
      if self.upperarm_endpoint is None:
        self.upperarm_endpoint = geometry_msgs.msg.Point()
      if self.upperarm_center is None:
        self.upperarm_center = geometry_msgs.msg.Point()
      if self.quat_upperarm2robot is None:
        self.quat_upperarm2robot = geometry_msgs.msg.Quaternion()
      if self.head_center is None:
        self.head_center = geometry_msgs.msg.Point()
      if self.quat_head2robot is None:
        self.quat_head2robot = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 272
      (_x.time, _x.lowerarm_startpoint.x, _x.lowerarm_startpoint.y, _x.lowerarm_startpoint.z, _x.lowerarm_endpoint.x, _x.lowerarm_endpoint.y, _x.lowerarm_endpoint.z, _x.lowerarm_center.x, _x.lowerarm_center.y, _x.lowerarm_center.z, _x.quat_lowerarm2robot.x, _x.quat_lowerarm2robot.y, _x.quat_lowerarm2robot.z, _x.quat_lowerarm2robot.w, _x.upperarm_startpoint.x, _x.upperarm_startpoint.y, _x.upperarm_startpoint.z, _x.upperarm_endpoint.x, _x.upperarm_endpoint.y, _x.upperarm_endpoint.z, _x.upperarm_center.x, _x.upperarm_center.y, _x.upperarm_center.z, _x.quat_upperarm2robot.x, _x.quat_upperarm2robot.y, _x.quat_upperarm2robot.z, _x.quat_upperarm2robot.w, _x.head_center.x, _x.head_center.y, _x.head_center.z, _x.quat_head2robot.x, _x.quat_head2robot.y, _x.quat_head2robot.z, _x.quat_head2robot.w,) = _get_struct_34d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_34d().pack(_x.time, _x.lowerarm_startpoint.x, _x.lowerarm_startpoint.y, _x.lowerarm_startpoint.z, _x.lowerarm_endpoint.x, _x.lowerarm_endpoint.y, _x.lowerarm_endpoint.z, _x.lowerarm_center.x, _x.lowerarm_center.y, _x.lowerarm_center.z, _x.quat_lowerarm2robot.x, _x.quat_lowerarm2robot.y, _x.quat_lowerarm2robot.z, _x.quat_lowerarm2robot.w, _x.upperarm_startpoint.x, _x.upperarm_startpoint.y, _x.upperarm_startpoint.z, _x.upperarm_endpoint.x, _x.upperarm_endpoint.y, _x.upperarm_endpoint.z, _x.upperarm_center.x, _x.upperarm_center.y, _x.upperarm_center.z, _x.quat_upperarm2robot.x, _x.quat_upperarm2robot.y, _x.quat_upperarm2robot.z, _x.quat_upperarm2robot.w, _x.head_center.x, _x.head_center.y, _x.head_center.z, _x.quat_head2robot.x, _x.quat_head2robot.y, _x.quat_head2robot.z, _x.quat_head2robot.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lowerarm_startpoint is None:
        self.lowerarm_startpoint = geometry_msgs.msg.Point()
      if self.lowerarm_endpoint is None:
        self.lowerarm_endpoint = geometry_msgs.msg.Point()
      if self.lowerarm_center is None:
        self.lowerarm_center = geometry_msgs.msg.Point()
      if self.quat_lowerarm2robot is None:
        self.quat_lowerarm2robot = geometry_msgs.msg.Quaternion()
      if self.upperarm_startpoint is None:
        self.upperarm_startpoint = geometry_msgs.msg.Point()
      if self.upperarm_endpoint is None:
        self.upperarm_endpoint = geometry_msgs.msg.Point()
      if self.upperarm_center is None:
        self.upperarm_center = geometry_msgs.msg.Point()
      if self.quat_upperarm2robot is None:
        self.quat_upperarm2robot = geometry_msgs.msg.Quaternion()
      if self.head_center is None:
        self.head_center = geometry_msgs.msg.Point()
      if self.quat_head2robot is None:
        self.quat_head2robot = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 272
      (_x.time, _x.lowerarm_startpoint.x, _x.lowerarm_startpoint.y, _x.lowerarm_startpoint.z, _x.lowerarm_endpoint.x, _x.lowerarm_endpoint.y, _x.lowerarm_endpoint.z, _x.lowerarm_center.x, _x.lowerarm_center.y, _x.lowerarm_center.z, _x.quat_lowerarm2robot.x, _x.quat_lowerarm2robot.y, _x.quat_lowerarm2robot.z, _x.quat_lowerarm2robot.w, _x.upperarm_startpoint.x, _x.upperarm_startpoint.y, _x.upperarm_startpoint.z, _x.upperarm_endpoint.x, _x.upperarm_endpoint.y, _x.upperarm_endpoint.z, _x.upperarm_center.x, _x.upperarm_center.y, _x.upperarm_center.z, _x.quat_upperarm2robot.x, _x.quat_upperarm2robot.y, _x.quat_upperarm2robot.z, _x.quat_upperarm2robot.w, _x.head_center.x, _x.head_center.y, _x.head_center.z, _x.quat_head2robot.x, _x.quat_head2robot.y, _x.quat_head2robot.z, _x.quat_head2robot.w,) = _get_struct_34d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_34d = None
def _get_struct_34d():
    global _struct_34d
    if _struct_34d is None:
        _struct_34d = struct.Struct("<34d")
    return _struct_34d
